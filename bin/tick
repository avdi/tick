#!/usr/bin/env ruby

require 'rubygems'
require 'main'
require 'highline'
require 'highline/import'
require 'git'
require 'nokogiri'
require 'yaml/store'
require 'net/https'
require 'addressable/uri'
require 'forwardable'

module Tick
  Fattr(:logger) { ::Logger.new($stderr) }

  module Common
    def logger
      Tick.logger
    end
  end

  class Project
    include Common
    extend Forwardable
    def_delegator :ticketing_project, :name

    fattr :ticketing_account
    fattr :ticketing_project

    def initialize
      self.ticketing_account  = nil
      self.ticketing_project = NullProject.new
    end
  end

  class NullProject
    include Common
    fattr :name => 'not set'
  end

  module TrackerResource
    attr_reader :url, :tracker

    fattr('response') {
      fetch(url)
    }

    def initialize(url, tracker)
      @url     = Addressable::URI.parse(url)
      @tracker = tracker
    end

    def [](path)
      xml.xpath(path).text
    end

    fattr(:representation) { response.body }

    def etag
      response['etag']
    end

    def fetch(url)
      tracker.fetch(url)
    end

    def token
      tracker.token
    end

    def xml
      Nokogiri::XML(representation)
    end
  end

  class Tracker
    include Common
    fattr :token
    fattr :base_uri

    fattr('client') {
      client = Net::HTTP.new(
        base_uri.host,
        base_uri.inferred_port)
      client.use_ssl     = true if base_uri.scheme == 'https'
      # client.certain        = OpenSSL::X509::Certificate.new(DATA)
      # client.key         = OpenSSL::PKey::RSA.new(DATA)
      client.verify_mode = OpenSSL::SSL::VERIFY_NONE # TODO fix this!
      client
    }

    def initialize(base_uri, login, password)
      @base_uri = Addressable::URI.parse(base_uri)
      @token    = retrieve_token(login, password)
    end

    def projects
      Nokogiri::XML(fetch("#{base_uri}/services/v3/projects").body).
        xpath('//project').map do |proj_xml|

        id = proj_xml.xpath('id').text
        proj = Tick::TrackerProject.new(
          "#{base_uri}/services/v3/projects/#{id}",
          self)
        proj.representation = proj_xml.to_s
        proj
      end
    end

    def fetch(url)
      logger.debug "GET #{url}"
      url = Addressable::URI.parse(url)
      request = Net::HTTP::Get.new(url.path)
      request['X-TrackerToken'] = token
      response = client.request(request)
    end

    private

    def retrieve_token(login, password)
      logger.debug "Retrieving token for login #{login}"
      client.start do |client|
        request = Net::HTTP::Get.new('/services/v3/tokens/active')
        request.basic_auth login, password
        response = client.request(request)
        case response
        when Net::HTTPSuccess
          token = extract_token(response.body)
          token
        else
          raise "Unable to retrieve API token: #{response.body}"
        end
      end
    end

    def extract_token(data)
      doc = Nokogiri::XML(data)
      doc.at_xpath('//guid').content
    end
  end

  class TrackerProject
    include Common
    include TrackerResource

    def name
      self['project/name']
    end
  end
end

Main do
  description "A tool for managing project tickets"

  fattr(:ui) {
    hl = HighLine.new
    hl
  }
  fattr(:project_root) { Pathname(Dir.pwd) }
  fattr(:project_config_path) { project_root + '.tick' }
  fattr(:store) {
    YAML::Store.new(project_config_path.to_s)
  }
  fattr(:login) { ui.ask("Tracker login: "){|q| q.default = guess_login } }
  fattr(:password) {
    ui.ask("Tracker password: ") {|q| q.echo = "*"}
  }
  fattr(:token) {
    project.ticketing_account.token
  }
  fattr(:tracker_base_uri) {
    params['TICK_TRACKER_BASE_URI'].value
  }
  fattr(:client) {
    info "Opening connection to #{tracker_base_uri}"
    client = Net::HTTP.new(
      tracker_base_uri.host,
      tracker_base_uri.inferred_port)
    client.use_ssl     = true if tracker_base_uri.scheme == 'https'
    # client.cert        = OpenSSL::X509::Certificate.new(DATA)
    # client.key         = OpenSSL::PKey::RSA.new(DATA)
    client.verify_mode = OpenSSL::SSL::VERIFY_NONE # TODO fix this!
    client
  }
  fattr(:projects) {
    project.ticketing_account.projects
  }
  fattr(:project_name) {
    project.name
  }
  fattr(:project) {
    store['project'] ||= initialize_project
  }

  option 'config_path' do
    default{ project_config_path }
  end

  option 'debug', 'd' do
    description "Show debug output"
    cast :boolean
    default false
    attr
  end

  option 'verbose', 'v' do
    description "Show verbose output"
    cast :boolean
    default false
    attr
  end

  environment('TICK_TRACKER_BASE_URI') {
    description "Base URI for Pivotal Tracker API"
    default 'https://www.pivotaltracker.com'
    cast lambda {|uri| Addressable::URI.parse(uri)}
    attr
  }

  def before_run
    if debug
      logger.level = ::Logger::DEBUG
    elsif verbose
      logger.level = ::Logger::INFO
    else
      logger.level = ::Logger::WARN
    end
    Tick.logger = self.logger
  end

  mode 'project' do
    description "List and choose ticketing system projects"

    mode 'list' do
      description "List projects you are a member of"
      def run
        store.transaction do
          projects.each do |p|
            say p.name
          end
        end
      end
    end

    mode 'select' do
      description "Choose a project to associate with the local project"
      def run
        store.transaction do
          ui.choose do |menu|
            menu.prompt = "Select a project: "
            projects.each do |ticketing_project|
              menu.choice(ticketing_project.name) do
                project.ticketing_project = ticketing_project
              end
            end
          end
        end
      end
    end
  end

  mode 'info' do
    description "Show information about the project"
    def run
      show_info
    end
  end

  mode 'login' do
    description "Login to the ticketing system"
    def run
      show_info
    end
  end

  def run
    help!
  end

  private

  def guess_login
    git_repo = Git.open(Dir.pwd)
    git_repo.config('user.email')
  end

  def show_info
    store.transaction do
      say "Project: #{project.name || '<not set>'}"
      say "Tracker token:  #{token}"
    end
  end

  def initialize_project
    logger.debug "Initializing project"
    project = Tick::Project.new
    ticketing_account = Tick::Tracker.new(tracker_base_uri, login, password)
    project.ticketing_account = ticketing_account
    project
  end
end
