#!/usr/bin/env ruby

require 'rubygems'
require 'main'
require 'highline'
require 'highline/import'
require 'git'
require 'nokogiri'
require 'yaml/store'
require 'net/https'
require 'addressable/uri'

Main do

  fattr(:ui) {
    hl = HighLine.new
    hl
  }
  fattr(:project_root) { Pathname(Dir.pwd) }
  fattr(:project_config_path) { project_root + '.tick' }
  fattr(:store) {
    store = YAML::Store.new(project_config_path.to_s)
    store.transaction(false) do |store|
      store['tracker'] ||= {}
    end
    store
  }
  fattr(:login) { ui.ask("Tracker login: "){|q| q.default = guess_login } }
  fattr(:password) {
    ui.ask("Tracker password: ") {|q| q.echo = "*"}
  }
  fattr(:token) {
    catch(:token) do
      store.transaction(true) do |s|
        if t = s['tracker']['token']
          throw :token, t
        end
      end
      retrieve_token
    end
  }
  fattr(:tracker_base_uri) {
    params['TICK_TRACKER_BASE_URI'].value
  }
  fattr(:client) {
    info "Opening connection to #{tracker_base_uri}"
    client = Net::HTTP.new(
      tracker_base_uri.host,
      tracker_base_uri.inferred_port)
    client.use_ssl     = true if tracker_base_uri.scheme == 'https'
    # client.cert        = OpenSSL::X509::Certificate.new(DATA)
    # client.key         = OpenSSL::PKey::RSA.new(DATA)
    client.verify_mode = OpenSSL::SSL::VERIFY_NONE # TODO fix this!
    client
  }
  fattr(:projects) {
    request = Net::HTTP::Get.new('/services/v3/projects')
    request['X-TrackerToken'] = token
    response = client.request(request)
  }

  option 'config_path' do
    default{ project_config_path }
  end

  environment('TICK_TRACKER_BASE_URI') {
    default 'https://www.pivotaltracker.com'
    cast lambda {|uri| Addressable::URI.parse(uri)}
    attr
  }

  mode 'project' do
    mode 'list' do
      def run
        projects.each do |p|
          puts p.name
        end
      end
    end
  end

  mode 'info' do
    def run
      say "Token:  #{token}"
    end
  end

  mode 'login' do
    info
  end

  def run
    help!
  end

  private

  def guess_login
    git_repo = Git.open(Dir.pwd)
    git_repo.config('user.email')
  end

  def retrieve_token
    client.start do |client|
      request = Net::HTTP::Get.new('/services/v3/tokens/active')
      request.basic_auth login, password
      response = client.request(request)
      case response
      when Net::HTTPSuccess
        token = extract_token(response.body)
        store_token!(token)
        token
      else
        say "Unable to retrieve API token: #{response.message}"
        exit_failure
      end
    end
  end

  def extract_token(data)
    doc = Nokogiri::XML(data)
    doc.at_xpath('//guid').content
  end

  def store_token!(token)
    store.transaction(false) do |store|
      store['token'] = token
      say "Token stored"
    end
  end
end
